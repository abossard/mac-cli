#!/bin/sh
###########################################################################
# mac CLI (mac command line tools) - OS X command line tools for developers
###########################################################################

# Version: 1.0
# Date: December 8, 2015
# Author: Gabriel Guarino
#
# Notes: Collection of useful functions to automate OS X common
# tasks
#
###########################################################################

#--------------------------------------------------------------------
# Global Variables
#--------------------------------------------------------------------
github_email_account="abossard@gmail.com"
github_username="abossard"

#--------------------------------------------------------------------
# Parameters
#--------------------------------------------------------------------
function=$1
firstParameter=$2
secondParameter=$3
allParameters=${@:2}

#--------------------------------------------------------------------
# Colors
#--------------------------------------------------------------------
GREEN='\033[0;32m'
GRAY='\033[0;37m'
LIGHTBLUE='\033[1;34m'
LIGHTGREEN='\033[1;32m'
WHITEBOLD='\033[1;37m'
RED='\033[1;31m'
NC='\033[0m' # No Color

#--------------------------------------------------------------------
# Utilities
#--------------------------------------------------------------------

# Is the user running commands in sudo?
IS_SUDO=$(id -u)

#--------------------------------------------------------------------
# Functions
#--------------------------------------------------------------------

function spinner()
{
    local i sp n
    sp='/-\|'
    n=${#sp}
    printf ' '
    while sleep 0.1; do
        printf "%s\b" "${sp:i++%n:1}"
    done
}

#--------------------------------------------------------------------
# mac script commands list - all commands
#--------------------------------------------------------------------

if [[ "$function" == "list" || "$function" == "help" ]]; then

    printf "\n${WHITEBOLD} mac CLI – OS X command line tools for developers\n"
    printf "${WHITEBOLD}====================================================\n"

    printf "\n${WHITEBOLD}General Utilities: \n"

    printf "${LIGHTBLUE}mac install${GRAY}: Install all mac script dependencies to be able to run all commands\n"
    printf "${LIGHTBLUE}mac install:all${GRAY}: Install all mac script dependencies and integrated projects\n"
    printf "${LIGHTBLUE}mac update${GRAY}: Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages\n"
    printf "${LIGHTBLUE}mac lock${GRAY}: Lock\n"
    printf "${LIGHTBLUE}mac restart${GRAY}: Restart OS X\n"
    printf "${LIGHTBLUE}mac sleep${GRAY}: Sleep mode\n"
    printf "${LIGHTBLUE}mac shutdown${GRAY}: Shutdown\n"
    printf "${LIGHTBLUE}mac time${GRAY}: Show clock at top right position in Terminal/iTerm\n"
    printf "${LIGHTBLUE}mac screensaver${GRAY}: Start screensaver\n"
    printf "${LIGHTBLUE}mac apps:close-all${GRAY}: Close all opened apps\n"
    printf "${LIGHTBLUE}mac apps:app-store${GRAY}: Get list of installed apps from App Store\n"
    printf "${LIGHTBLUE}mac eject-all${GRAY}: Eject all mounted volumes and disks\n"
    printf "${LIGHTBLUE}mac battery:status${GRAY}: Get battery information\n"
    printf "${LIGHTBLUE}mac info${GRAY}: Get OS X version information\n"

    printf "\n\n${WHITEBOLD}Search Utilities: \n"
    printf "${LIGHTBLUE}mac find:recent ${LIGHTGREEN}X${GRAY}: Find files modified in the last N minutes - ${LIGHTGREEN}X = number of minutes \n"
    printf "${LIGHTBLUE}mac search:replace ${LIGHTGREEN}X${GRAY}: Search and replace string in file - ${LIGHTGREEN}X = File to perform the search and replace operation\n"


    printf "\n\n${WHITEBOLD}Network Utilities: \n"
    printf "${LIGHTBLUE}mac speedtest${GRAY}: Internet connection speed test \n"
    printf "${LIGHTBLUE}mac speedtest:infinite${GRAY}: Run internet speed test each 5 minutes \n"
    printf "${LIGHTBLUE}mac ports${GRAY}: List of used ports \n"
    printf "${LIGHTBLUE}mac ip:local${GRAY}: Get local IP address \n"
    printf "${LIGHTBLUE}mac ip:public${GRAY}: Get public IP address \n"


    printf "\n\n${WHITEBOLD}Performance and maintenance Utilities: \n"
    printf "${LIGHTBLUE}mac system${GRAY}: Show system information to review mac performance \n"
    printf "${LIGHTBLUE}mac temp${GRAY}: Show temperature, fan and battery statistics \n"
    printf "${LIGHTBLUE}mac memory${GRAY}: See memory usage sorted by memory consumption \n"
    printf "${LIGHTBLUE}mac trash:empty${GRAY}: Empty trash\n"
    printf "${LIGHTBLUE}mac trash:size${GRAY}: Calculate trash size\n"

    printf "\n\n${WHITEBOLD}Xcode Utilities: \n"
    printf "${LIGHTBLUE}mac xcode:cleanup${GRAY}: Cleanup XCode files to free up hard disk space \n"

#--------------------------------------------------------------------
# mac script commands list - general commands
#--------------------------------------------------------------------

elif [ "$function" == "list:general" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n${WHITEBOLD}General Utilities: \n"

    printf "${LIGHTBLUE}mac install${GRAY}: Install all mac script dependencies to be able to run all commands\n"
    printf "${LIGHTBLUE}mac install:all${GRAY}: Install all mac script dependencies and integrated projects\n"
    printf "${LIGHTBLUE}mac update${GRAY}: Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages\n"
    printf "${LIGHTBLUE}mac lock${GRAY}: Lock\n"
    printf "${LIGHTBLUE}mac restart${GRAY}: Restart OS X\n"
    printf "${LIGHTBLUE}mac sleep${GRAY}: Sleep mode\n"
    printf "${LIGHTBLUE}mac shutdown${GRAY}: Shutdown\n"
    printf "${LIGHTBLUE}mac time${GRAY}: Show clock at top right position in Terminal/iTerm\n"
    printf "${LIGHTBLUE}mac screensaver${GRAY}: Start screensaver\n"
    printf "${LIGHTBLUE}mac folders:list${GRAY}: List folders in current directory with their current size\n"
    printf "${LIGHTBLUE}mac folder:size${GRAY}: Calculate current folder size\n"
    printf "${LIGHTBLUE}mac folders:remove-empty${GRAY}: Remove empty subdirectories\n"
    printf "${LIGHTBLUE}mac apps:close-all${GRAY}: Close all opened apps\n"
    printf "${LIGHTBLUE}mac apps:app-store${GRAY}: Get list of installed apps from App Store\n"
    printf "${LIGHTBLUE}mac eject-all${GRAY}: Eject all mounted volumes and disks\n"
    printf "${LIGHTBLUE}mac battery:status${GRAY}: Get battery information\n"
    printf "${LIGHTBLUE}mac info${GRAY}: Get OS X version information\n"

#--------------------------------------------------------------------
# mac script commands list - search commands
#--------------------------------------------------------------------

elif [ "$function" == "list:search" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Search Utilities: \n"
    printf "${LIGHTBLUE}mac find:recent ${LIGHTGREEN}X${GRAY}: Find files modified in the last N minutes - ${LIGHTGREEN}X = number of minutes \n"
    printf "${LIGHTBLUE}mac find:duplicated ${GRAY}: Find duplicated files in current directory and subcategories\n"
    printf "${LIGHTBLUE}mac search:replace ${LIGHTGREEN}X${GRAY}: Search and replace string in file - ${LIGHTGREEN}X = File to perform the search and replace operation\n"

#--------------------------------------------------------------------
# mac script commands list - network commands
#--------------------------------------------------------------------

elif [ "$function" == "list:network" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Network Utilities: \n"
    printf "${LIGHTBLUE}mac speedtest${GRAY}: Internet connection speed test \n"
    printf "${LIGHTBLUE}mac speedtest:infinite${GRAY}: Run internet speed test each 5 minutes \n"
    printf "${LIGHTBLUE}mac ports${GRAY}: List of used ports \n"
    printf "${LIGHTBLUE}mac ip:local${GRAY}: Get local IP address \n"
    printf "${LIGHTBLUE}mac ip:public${GRAY}: Get public IP address \n"



elif [ "$function" == "list:performance" ]; then

    printf "\n${WHITEBOLD} mac – OS X command line tools for developers\n"
    printf "${WHITEBOLD}================================================"

    printf "\n\n${WHITEBOLD}Performance and maintenance Utilities: \n"
    printf "${LIGHTBLUE}mac system${GRAY}: Show system information to review mac performance \n"
    printf "${LIGHTBLUE}mac temp${GRAY}: Show temperature, fan and battery statistics \n"
    printf "${LIGHTBLUE}mac memory${GRAY}: See memory usage sorted by memory consumption \n"
    printf "${LIGHTBLUE}mac trash:empty${GRAY}: Empty trash\n"
    printf "${LIGHTBLUE}mac trash:size${GRAY}: Calculate trash size\n"
    printf "${LIGHTBLUE}mac desktop:cleanup${GRAY}: Remove all files and directories from the Desktop directory\n"
    printf "${LIGHTBLUE}mac downloads:cleanup${GRAY}: Remove all files and directories from the Downloads directory\n"


#--------------------------------------------------------------------
# mac script commands list - xCode commands
#--------------------------------------------------------------------

elif [ "$function" == "list:xcode" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Xcode Utilities: \n"
    printf "${LIGHTBLUE}mac xcode:cleanup${GRAY}: Cleanup XCode files to free up hard disk space \n"

#--------------------------------------------------------------------
# General Utilities
#--------------------------------------------------------------------
elif [ "$function" == "lock" ]; then
    printf "${GREEN}/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend\n\n${NC}"
    /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend

elif [ "$function" == "restart" ]; then
	printf "${GREEN}osascript -e 'tell app 'loginwindow' to «event aevtrrst»''\n\n${NC}"
	osascript -e 'tell app "loginwindow" to «event aevtrrst»'

elif [ "$function" == "sleep" ]; then
	printf "${GREEN}pmset sleepnow\n\n${NC}"
	pmset sleepnow

elif [ "$function" == "shutdown" ]; then
	printf "${GREEN}osascript -e 'tell app 'loginwindow' to «event aevtrsdn»'\n\n${NC}"
	osascript -e 'tell app "loginwindow" to «event aevtrsdn»'

elif [ "$function" == "time" ]; then
	printf "${GREEN}while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &'\n\n${NC}"
	while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &

# Close all opened apps
elif [ "$function" = "apps:close-all" ]; then
	printf "${GREEN}ignore='grep\|iTerm\|Finder\|Dropbox\|Bartender'\n${NC}"
	printf "${GREEN}ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X\n\n${NC}"
	# To customize ignored apps, just put the keywords in $ignore
	# To test which apps you are going to kill, run:
	# ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 11 | xargs -I X echo X
	ignore="grep\|iTerm\|Finder\|Dropbox\|Bartender"
	ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X

# Get list of installed apps from the App Store
elif [ "$function" == "apps:app-store" ]; then
	printf "${GREEN}find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'\n\n${NC}"
	echo "Getting list of installed apps from the App Store...\n"
	find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'

# Start screensaver
elif [ "$function" == "screensaver" ]; then
	printf "${GREEN}open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app\n\n${NC}"
	open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app

# Eject all mounted volumes and disk
elif [ "$function" == "eject-all" ]; then
	printf "${GREEN}osascript -e 'tell application 'Finder' to eject (every disk whose executable is true)'\n\n${NC}"
	osascript -e 'tell application "Finder" to eject (every disk whose executable is true)'

# Get battery information
elif [ "$function" == "battery:status" ]; then
	printf "${GREEN}system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'\n\n${NC}"
	system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'

# Install all mac script dependencies
elif [ "$function" == "install" ]; then
	echo "Copying script to local folder..."
	cp mac /usr/local/bin/mac
	echo "Installing homebrew..."
	printf "${GREEN}/usr/bin/ruby -e '\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)'\n${NC}"
	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	echo "Installing pip..."
	printf "${GREEN}sudo easy_install pip\n${NC}"
	sudo easy_install pip
	echo "Installing GIT..."
	printf "${GREEN}brew install git\n${NC}"
	brew install git
	echo "Installing pv (Pipe Viewer)..."
	printf "${GREEN}brew install pv\n${NC}"
	brew install pv
	echo "Installing Python..."
	printf "${GREEN}brew install python\n${NC}"
	brew install python
	echo "Installing fdupes..."
	printf "${GREEN}brew install fdupes\n\n${NC}"
    brew install fdupes

# Install all mac script dependencies and integrated projects
elif [ "$function" == "install:all" ]; then
    echo "Copying script to local folder..."
	cp mac /usr/local/bin/mac
    echo "Installing homebrew..."
	printf "${GREEN}/usr/bin/ruby -e '\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)'\n${NC}"
	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	echo "Installing pip..."
	printf "${GREEN}sudo easy_install pip\n${NC}"
	sudo easy_install pip
	echo "Installing GIT..."
	printf "${GREEN}brew install git\n${NC}"
	brew install git
	echo "Installing pv (Pipe Viewer)..."
	printf "${GREEN}brew install pv\n${NC}"
	brew install pv
	echo "Installing Python..."
	printf "${GREEN}brew install python\n${NC}"
	brew install python
	mac install
	echo "Installing Glances (https://github.com/nicolargo/glances)..."
	printf "${GREEN}pip install glances\n${NC}"
	pip install glances
	echo "Installing SpeedTest CLI (https://github.com/sivel/speedtest-cli)..."
	printf "${GREEN}pip install speedtest-cli\n${NC}"
	pip install speedtest-cli
	echo "Installing fdupes..."
	printf "${GREEN}brew install fdupes\n\n${NC}"
	brew install fdupes
	echo "Installing iStats..."
	printf "${GREEN}sudo gem install iStats -n/usr/local/bin\n\n${NC}"
    	sudo gem install iStats -n/usr/local/bin

# Install OS X software updates, update installed Ruby gems, Homebrew, npm, pip and their installed packages
elif [ "$function" == "update" ]; then
	echo "Updating OS X..."
	printf "${GREEN}sudo softwareupdate -i -a;\n${NC}"
	sudo softwareupdate -i -a;
	echo "Updating Homebrew and its installed packages..."
	printf "${GREEN}brew update; brew upgrade --all; brew cleanup;\n${NC}"
	brew update; brew upgrade --all; brew cleanup;
	echo "Updating npm and its installed packages..."
	printf "${GREEN}npm install npm -g; npm update -g;\n${NC}"
	npm install npm -g; npm update -g;
	echo "Updating installed Ruby gems..."
	printf "${GREEN}sudo gem update --system; sudo gem update\n${NC}"
	sudo gem update --system; sudo gem update
	echo "Updating installed pip packages..."
	printf "${GREEN}pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U\n${NC}"
	pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
	echo "Your system has been successfully updated"


#--------------------------------------------------------------------
# Network Utilities
#--------------------------------------------------------------------
# Internet connection speed test
elif [ "$function" == "speedtest" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		echo "Testing internet connection speed..."
		node "/usr/local/lib/node_modules/speed-test/cli.js"
	fi

# Run internet connection Speed Test each 5 minutes
elif [ "$function" == "speedtest:infinite" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		while true
		do
			title="\nTesting internet connection speed - "
			title+=`date '+%Y-%m-%d %H:%M:%S'`
			echo $title
			node "/usr/local/lib/node_modules/speed-test/cli.js"
			sleep 300
		done
	fi

# List of used ports
elif [ "$function" == "ports" ]; then
	echo "Getting list of used ports..."
	printf "${GREEN}sudo lsof -iTCP -sTCP:LISTEN -P\n\n${NC}"
	sudo lsof -iTCP -sTCP:LISTEN -P

# Get local IP address
elif [ "$function" == "ip:local" ]; then
	local_ip=$(ipconfig getifaddr en0)
	if [ $? == 0 ]; then
		printf "${GREEN}ipconfig getifaddr en0\n\n${NC}"
	else
		printf "${GREEN}ipconfig getifaddr en1\n\n${NC}"
		local_ip=$(ipconfig getifaddr en1)
	fi
	printf "Your IP address is:\n${local_ip}\n"

# Get public IP address
elif [ "$function" == "ip:public" ]; then
	printf "${GREEN}wget http://ipinfo.io/ip -qO -\n\n${NC}"
	wget http://ipinfo.io/ip -qO -


# Get battery information
elif [ "$function" == "battery:status" ]; then
	printf "${GREEN}system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'\n\n${NC}"
	system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'
	
# Get OS X version information
elif [ "$function" == "info" ]; then
	printf "${GREEN}sw_vers \n\n${NC}"
	sw_vers
	
# Edit hosts file
elif [ "$function" == "hosts:edit" ]; then
	printf "${GREEN}sudo vi /private/etc/hosts \n\n${NC}"
	sudo vi /private/etc/hosts

#--------------------------------------------------------------------
# Performance and maintenance Utilities
#--------------------------------------------------------------------

# Get overall system information
elif [ "$function" == "system" ]; then
	printf "${GREEN}glances \n\n${NC}"
	glances

# Show temperature, fan and battery statistics
elif [ "$function" == "temp" ]; then
    if [ ! -f /usr/local/bin/istats ]; then
		read -r -p "Do you want to install the iStats utility? (https://github.com/Chris911/iStats) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				sudo gem install iStats -n/usr/local/bin
				;;
			*)
				exit
				;;
		esac
	else
		printf "${GREEN}istats all \n\n${NC}"
	    istats all
	fi

# See memory usage sorted by memory consumption
elif [ "$function" == "memory" ]; then
	printf "${GREEN}top -o MEM \n\n${NC}"
	top -o MEM

# Empty trash
elif [ "$function" == "trash:empty" ]; then
	printf "${GREEN}sudo rm -rf ~/.Trash/* \n\n${NC}"
	sudo rm -rf ~/.Trash/*

# Calculate trash size
elif [ "$function" == "trash:size" ]; then
	printf "${GREEN}du -sh ~/.Trash/ \n\n${NC}"
	echo "Trash size: \n"
	du -sh ~/.Trash/

# Remove all files and directories from Desktop directory
elif [ "$function" == "desktop:cleanup" ]; then
	printf "${GREEN}du -sh ~/.Trash/ \n\n${NC}"
	echo "These are the files and directories that are currently located on Desktop: \n"
	ls -lat ~/Desktop/
	echo "\n=============================================\n"
	read -r -p "Do you want to remove all the content from the Desktop directory? (Yes / No)" response
    case $response in
        [yY][eE][sS]|[yY])
            rm -rf ~/Desktop/*
            ;;
        *)
            exit
            ;;
    esac

# Remove all files and directories from Downloads directory
elif [ "$function" == "downloads:cleanup" ]; then
	printf "${GREEN}du -sh ~/.Trash/ \n\n${NC}"
	echo "These are the files and directories that are currently located on Downloads: \n"
	ls -lat ~/Downloads/
	echo "\n=============================================\n"
	read -r -p "Do you want to remove all the content from the Downloads directory? (Yes / No)" response
    case $response in
        [yY][eE][sS]|[yY])
            rm -rf ~/Downloads/*
            ;;
        *)
            exit
            ;;
    esac

#--------------------------------------------------------------------
# XCode Utilities
#--------------------------------------------------------------------

elif [ "$function" == "xcode:cleanup" ]; then

	echo "========== Cleanup start =========="

	# define paths
	archivesPath="/Library/Developer/Xcode/Archives"
	derivedDataPath="/Library/Developer/Xcode/DerivedData"
	oldDeviceInfoPath="/Library/Developer/Xcode/iOS DeviceSupport"
	simulatorApplicationRootPath="/Library/Application Support/iPhone Simulator/"
	USER_HOME=$(eval echo ~${SUDO_USER})

	paths=( "$archivesPath" "$derivedDataPath" "$oldDeviceInfoPath" )
	msgs=( "Archives" "DerivedData" "Old device information" )
	pathsLength=${#paths[@]}

	# Clean up developer folder
	# loop through predefined paths
	for (( i=0; i<${pathsLength}; i++ ));
	do
	  CMD="sudo rm -rf "$USER_HOME${paths[$i]}"/*"
	  $CMD
	  echo ${msgs[$i]}" cleared"
	done

	# Clean up iOS Simulator
	ignoreFolders=("Applications" "Containers" "Library" "Root" "User" "tmpspace")
	versionMarker="."

	rootPathIdx=$((${#USER_HOME} + ${#simulatorApplicationRootPath}))
	for folderPath in "$USER_HOME$simulatorApplicationRootPath"*
	do
		length=${#folderPath}
		folderName=${folderPath:$rootPathIdx:$((length - rootPathIdx))}

		# Find folder in ~/Library/Application Support/iPhone Simulator/ with "." (assuming it is simulator version) and not in ignored list
		if [[ "${ignoreFolders[*]}" != *$folderName* && $folderName == *$versionMarker* ]]; then

			# Check if Applications folder exists
			if [ -d "$folderPath/Applications" ]; then
				echo 'iOS Simulator version '$folderName' with applications installed, now cleared'
				tmpFolderPath="${folderPath// /*}"
				CMD="sudo rm -rf "$tmpFolderPath"/Applications"
				$CMD
			fi

			# Check if tmp folder exists
			if [ -d "$folderPath/tmp" ]; then

				# Check tmp files in folder with special prefixs (say ghostlyIcons.xqwj3qwb2)
				tmpFolderPath="${folderPath// /*}"
				hasTmpFiles=false
				for ext in "ghostlyIcons" "gridImages" "iconImages" "iconLabels_gray"
				do
					fileCheckPath="$tmpFolderPath/tmp/$ext.*"
					if (ls $fileCheckPath > /dev/null 2>&1)
					then
					  CMD="sudo rm -rf "$tmpFolderPath"/tmp/$ext.*"
					  $CMD
					  hasTmpFiles=true
					fi
				done

				if ($hasTmpFiles); then
					echo 'iOS Simulator version '$folderName' tmp files cleared'
				fi
			fi
		fi

	done

	echo "========== Cleanup ended =========="
	echo "Suggest you to restart your xcode"
	echo "========== Have a nice day =========="

#--------------------------------------------------------------------
# Online search Utilities
#--------------------------------------------------------------------

# TODO: Add "Feeling Lucky" Google Search with parameters to quickly access first result

# TODO: Add Google Search with parameters

else
	echo "\nCommand not found: "
	echo "$function"
	echo "\nParameters: "
	echo "$allParameters"
fi
